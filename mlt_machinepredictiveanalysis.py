# -*- coding: utf-8 -*-
"""MLT_MachinePredictiveAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lGAqXuHOYlWjJZC829JJnIVxcHExf1bq

# Prediksi Kerusakan Mesin *Milling* dengan *Random Forest Classifier*, *Multi Layer Perceptron Classifier*, dan *XGBoost Classifier*

Mesin milling (disebut juga mesin frais) adalah mesin perkakas yang digunakan untuk membentuk benda kerja dengan menggunakan alat potong yang berputar. Proses ini menghasilkan permukaan datar atau bentuk yang presisi pada benda kerja.

Beberapa faktor yang berkontribusi kepada kerusakan mesin milling ini termasuk suhu, torsi, kecepatan rotasi alat potong, usia pemakaian alat, hingga kualitas alat potong. Dalam proyek ini, akan digunakan tiga algoritma untuk memprediksi kerusakan mesin milling, dengan mempertimbangkan faktor paling relevan dari berbagai faktor yang sudah disebutkan di atas.

## Import Library

Tahap ini merupakan tahap memasukkan Library yang digunakan dalam pengerjaan proyek, adapun library yang digunakan adalah :

1. **Numpy** - Library untuk operasi matematika pada array dan matriks multidimensi
2. **Pandas** - Menyediakan struktur data dan alat analisis data yang mudah digunakan, terutama untuk bekerja dengan dataframe
3. **Matplotlib** - Library untuk visualisasi data dalam bentuk grafik, plot, histogram, dll
4. **Seaborn** - Memperindah plot matplotlib dengan antarmuka
5. **Kagglehub** - Mengambil data dari Kaggle
6. **Label Encoder** - Untuk mengubah label kategorikal menjadi bentuk yang dapat diolah oleh algoritma
7. **StandardScaler** - Metode untuk menskalakan fitur sehingga memiliki rata-rata nol dan varians satu, membantu algoritma Machine Learning menangani data dengan efisien.
8. **TrainTestSplit** - Memisahkan data menjadi data latih dan data uji
9. **RandomForestClassifier** - Algoritma ensemble untuk klasifikasi yang menggunakan kombinasi dari pohon keputusan.
10. **XGBoostClassifier** - Algoritma untuk klasifikasi berbasis peningkatan gradien ekstrim
11. **accuracy_score** - Metrik untuk mengukur akurasi klasifikasi.
12. **confusion_matrix** - Metrik untuk memvisualisasikan performa klasifikasi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub
from kagglehub import KaggleDatasetAdapter

from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier

from sklearn.metrics import accuracy_score, confusion_matrix

"""## Data Loading

Tahap ini adalah memasukkan dataset ke dalam proyek. Dataset yang digunakan adalah Predictive Maintenance Dataset (AI4I 2020) oleh Stephan Matzka yang diambil dari Kaggle pada link [berikut](https://www.kaggle.com/datasets/stephanmatzka/predictive-maintenance-dataset-ai4i-2020)
"""

from google.colab import files
files.upload()

!pip install kaggle

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d stephanmatzka/predictive-maintenance-dataset-ai4i-2020

!unzip /content/predictive-maintenance-dataset-ai4i-2020.zip

"""Setelah dataset diunduh, kita *preview* isi dari dataset ini"""

df = pd.read_csv('/content/ai4i2020.csv')
df.head(10)

"""## Data Analysis

Tahap pertama dalam analisis dataset ini adalah dengan mengetahui jumlah dan tipe data dari seluruh data yang ada dalam dataset ini
"""

df.info()

"""Sesuai dengan informasi dataset yang didapatkan dalam sumber data, Dataset terkait memiliki 10000 data dengan 14 fitur, yang mana 8 fitur akan diseleksi dalam proses analisis data selanjutnya untuk digunakan dalam algoritma prediksi, dan 6 fitur target yaitu Machine failure, TWF, HDF, PWF, OSF, dan RNF. Berikut adalah daftar variabel beserta penjelasannya:

1. UID: nomor identifikasi unik 1 to 10000
2. product ID: terdiri atas huruf L, M, or H untuk low (50% keseluruhan produk), medium (30%) and high (20%) sebagai variasi kualitas produk dan nomor serial spesifik terhadap varian itu.
3. type: Tipe kualitas produk sesuai kolom 2
4. air temperature [K]: Suhu udara ternormalisasi ke sekitar 300 K dengan deviasi skeitar 2 K
5. process temperature [K]: Suhu proses ternormalisasi ke penambahan sekitar 10 K dari suhu udara dengan deviasi sekitar 1 K.
6. rotational speed [rpm]: kecepatan rotasi dari alat potong, dikalkulasi dari daya sekitar 2860 W
7. torque [Nm]: torsi dari alat potong, terdirtribusi normal sekitar 40 Nm dengan deviasi sekitar 10 Nm
8. tool wear [min]: Menit penggunaan alat, dengan penambahan 5/3/2 menit sesuai dengan kualitas alat L/M/H
9. 'machine failure': label yang menunjukkan terjadinya kerusakan alat potong dalam bentuk apapun sesuai pada di penjelasan berikutnya.

Serta detail lebih lanjut mengenai tipe kerusakan yang tercakup pada dataset ini yaitu:
1. tool wear failure (TWF): kerusakan akibat usia pemakaian alat, setelah sekitar 200-240 menit
2. heat dissipation failure (HDF): kerusakan ketika perbedaan antara suhu udara dengan proses di bawah 8.6 K dan kecepatan rotasi alat di bawah 1380 rpm.
3. power failure (PWF): kerusakan akibat kesamaan antara daya yang dibutuhkan untuk proses dengan torsi dan kecepatan rotasi. Jika daya ini di bawah 3500 W dan di atas 9000 W
4. overstrain failure (OSF): kerusakan akibat usia pemakaian  dan torsi, yang melebihi 11000 Nm untuk tipe L, 12000 Nm untuk tipe M, dan 13000 untuk tipe H.
5. random failures (RNF): kerusakan yang terjadi diluar parameter kerusakan apapun, dengan potensi kerusakan seperti ini untuk semua alat hanya sebesar 0.1%.

Tahap kedua adalah dengan melihat informasi statistikal dari dataset.
"""

df.describe()

"""Tahap ketiga adalah untuk memeriksa apakah ada deretan data yang kosong pada kolom tertentu"""

df.isna().sum()

"""Tahap keempat adalah memeriksa apakah ada data yang terduplikasi"""

df.duplicated().sum()

"""## Memeriksa Outlier

Langkah selanjutnya adalah mengidentifikasi adanya Outlier atau Pencilan Dalam Data. Outliers adalah sampel yang nilainya sangat jauh dari cakupan umum data utama, ia adalah hasil pengamatan yang kemunculannya sangat jarang dan berbeda dari hasil pengamatan lainnya.

Dalam proyek ini, kita akan menggunakan Metode IQR Method dalam mengatasi outlier. Metode Inter Quartile Range atau IQR berhubungan dengan konsep kuartil. Kuartil dari suatu populasi adalah tiga nilai yang membagi distribusi data menjadi empat sebaran. Seperempat dari data berada pada kuartil pertama (Q1), setengah dari data berada dibawah kuartil kedua (Q2), dan tiga perempat dari data berada di kuartil ketiga (Q3).

Nilai Interquartile Range didapatkan dengan rumus

IQR = Q3 - Q1

Kita akan menggunakan Bantuan Visualisasi Data Menggunakan Boxplot untuk mendeteksi outlier. dalam Boxplot, menunjukkan ukuran lokasi dan penyebaran, serta memberikan informasi tentang simetri dan outliers.

**Mencari outlier pada fitur Air Temperature**
"""

sns.boxplot(x=df['Air temperature [K]'])

"""Tidak ada outlier pada data Air Temperature

**Mencari outlier pada fitur Process Temperature**
"""

sns.boxplot(x=df['Process temperature [K]'])

"""Tidak ada outlier pada data Process Temperature

**Mencari outlier pada fitur Rotational Speed**
"""

sns.boxplot(x=df['Rotational speed [rpm]'])

"""Terdapat banyak outlier pada data Rotational Speed. Hal ini mengindikasikan data yang memang salah, atau justru data ini mengindikasikan alat alat yang mengalami kerusakan.

**Mencari outlier pada fitur Torque**
"""

sns.boxplot(x=df['Torque [Nm]'])

"""Sama hal nya dengan data Rotational Speed, data Torque juga memiliki banyak outlier

**Mencari outlier pada fitur Tool Wear**
"""

sns.boxplot(x=df['Tool wear [min]'])

"""Tidak ada outlier pada data Tool Wear

## Univariate Analysis

Tahapan ini merupakan tahapan menganalisa satu persatu fitur kategorikal dan numerikal dalam dataset.

**Analisis Fitur Kategorikal**

Tool Wear Failure
"""

count_fail = df["Machine failure"].value_counts()
percent = 100*df["Machine failure"].value_counts(normalize=True)
count_fail.plot(kind='bar', title="Machine failure")
df_fail = pd.DataFrame({'Jumlah':count_fail, 'Persentase':percent.round(1)})
print(df_fail)

"""Terdapat 339 data kerusakan mesin dari keseluruhan 10000 data, yang berarti hanya 3.4% nya.

### Multivariate Analysis

Tahapan ini adalah menganalisa dua atau lebih fitur kategorikal dan/atau numerikal sekaligus

**Kerusakan mesin berdasarkan kualitas mesin**

(Kualitas mesin > L = Low, M = Medium, H = High)
"""

plt.figure(figsize=(8, 6))
sns.countplot(x='Type', hue='Machine failure', data=df)
plt.title('Machine Failures by Type')
plt.xlabel('Machine Type')
plt.ylabel('Count')
plt.show()

"""Paling banyak kerusakan terjadi pada mesin dengan tipe kualitas L (low), terbanyak kedua ada pada tipe M (medium) dan paling sedikit pada tipe H (high)

**Kerusakan mesin terhadap suhu udara**, serta **Distribusi kerusakan mesin terhadap suhu udara berdasarkan tipe mesin**
"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Air temperature [K]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Air Temperature')
plt.xlabel('Air Temperature [K]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Air temperature [K]', data=df_failed)
plt.title('Air temp Distribution for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Air temperature [K]')
plt.show()

"""Terdapat paling banyak kerusakan terjadi pada rentang suhu 300 K hingga sekitar 303 K, serta ada sedikit outlier kerusakan yang terjadi pada suhu di bawah 300 K untuk mesin tipe M dan H

**Kerusakan mesin terhadap suhu proses**, serta **Distribusi kerusakan mesin terhadap suhu proses berdasarkan tipe mesin**
"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Process temperature [K]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Process Temperature')
plt.xlabel('Process Temperature [K]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Process temperature [K]', data=df_failed)
plt.title('Process temp Distribution for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Process temperature [K]')
plt.show()

"""Terdapat paling banyak kerusakan terjadi pada rentang suhu 309 K hingga sekitar 311 K, serta ada beberapa outlier kerusakan yang terjadi pada suhu di bawah 308 K untuk semua tipe mesin

**Kerusakan mesin terhadap kecepatan rotasi**, serta **Distribusi kerusakan mesin terhadap kecepatan rotasi berdasarkan tipe mesin**
"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Rotational speed [rpm]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Rotational Speed')
plt.xlabel('Rotational speed [rpm]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Rotational speed [rpm]', data=df_failed)
plt.title('Rotation speed Distribution for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Rotational speed [rpm]')
plt.show()

"""Mayoritas kerusakan terjadi pada rentang kecepatan rotasi 1250 rpm hingga sekitar 1500 rpm, serta ada beanyak outlier kerusakan yang terjadi pada rotasi di atas 1500 rpm pada semua tipe mesin

**Kerusakan mesin terhadap torsi**, serta **Distribusi kerusakan mesin terhadap torsi berdasarkan tipe mesin**
"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Torque [Nm]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Torque')
plt.xlabel('Torque [Nm]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Torque [Nm]', data=df_failed)
plt.title('Torque Distribution for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Torque [Nm]')
plt.show()

"""Mayoritas kerusakan terjadi pada rentang torsi 40 nm hingga sekitar 70 Nm, serta ada banyak outlier kerusakan yang terjadi pada torsi di bawah 30 Nm pada semua tipe mesin

**Kerusakan mesin terhadap usia pemakaian mesin**, serta **Distribusi kerusakan mesin terhadap usia pemakaian mesin berdasarkan tipe mesin**
"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Tool wear [min]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Tool wear')
plt.xlabel('Tool wear [min]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Tool wear [min]', data=df_failed)
plt.title('Tool wear for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Tool wear [min]')
plt.show()

"""Mayoritas kerusakan terjadi pada rentang torsi 40 nm hingga sekitar 70 Nm, serta ada banyak outlier kerusakan yang terjadi pada torsi di bawah 30 Nm pada semua tipe mesin

(Membuat fitur baru yang menampung selisih suhu antara suhu udara dengan suhu proses)
"""

df['Temp Diff [K]'] = df['Process temperature [K]'] - df['Air temperature [K]']
df.head()

"""**Kerusakan mesin terhadap selisih suhu**, serta **Distribusi kerusakan mesin terhadap selisih suhu berdasarkan tipe mesin**"""

df_failed = df[df['Machine failure'] == 1]

plt.figure(figsize=(10, 12))

plt.subplot(2, 1, 1)
sns.histplot(data=df_failed, x='Temp Diff [K]', bins=20, kde=True)
plt.title('Machine Failure Occurrences by Temp Diff [K]')
plt.xlabel('Temp Diff [K]')
plt.ylabel('Number of Machine Failures')
plt.show()

plt.subplot(2, 1, 2)
sns.boxplot(x='Type', y='Temp Diff [K]', data=df_failed)
plt.title('Temp Diff for Failed Machines by Machine Type')
plt.xlabel('Machine Type')
plt.ylabel('Temp Diff [K]')
plt.show()

"""Mayoritas kerusakan terjadi pada rentang selisih suhu 8 K hingga sekitar 9 K

## Data Preparation

Hapus dahulu kolom yang tidak akan digunakan. Kolom yang tidak akan digunakan adalah `UDI`, `Product ID`, serta segala jenis spesifik kerusakan mesin, dari `TWF` hingga `RNF`, karena kita akan terfokus ke kerusakan mesin keseluruhan.
"""

del_columns = ["UDI", "Product ID", "TWF", "HDF", "PWF", "OSF", "RNF"]
df = df.drop(columns=del_columns)
df.head()

"""Label Encoding `Type` agar bisa dilihat korelasinya"""

le = LabelEncoder()
df['Type'] = le.fit_transform(df['Type'])
df.head()

df.describe()

"""Periksa korelasi antar fitur dalam dataset"""

corr = df.corr()
sns.heatmap(corr, annot=True)
plt.show()

"""Ditemukan korelasi tertinggi dengan `Machine failure` ada dengan data `Torque [Nm]`, `Tool wear [min]`, serta `Temp Diff [K]`

Standarisasi fitur yang memiliki standar deviasi tinggi yaitu `Rotational speed [rpm]`, dan `Tool wear [min]`
"""

std = StandardScaler()
df[['Rotational speed [rpm]', 'Tool wear [min]']] = std.fit_transform(df[['Rotational speed [rpm]', 'Tool wear [min]']])
df.head()

"""Train Test Split

Data dipecah menjadi data pelatihan model (80% dari keseluruhan) dan data pengujian model (20% dari keseluruhan). Fitur yang akan digunakan utamanya untuk menghasilkan prediksi adalah data yang berkorelasi paling tinggi dengan kerusakan mesin milling, yaitu `Torque [Nm]`, `Tool wear [min]`, serta `Temp Diff [K]`.
"""

df.columns = df.columns.str.replace('[\[\]<>]', '', regex=True).str.replace(' ', '_')

X = df[['Temp_Diff_K', 'Torque_Nm', 'Tool_wear_min']]
y = df['Machine_failure']
X_train, X_test, y_train,y_test = train_test_split(X,y, test_size = 0.20, random_state=42)

print(X_train.shape)
print(X_test.shape)

"""## Modelling

**XGBoost Classifier**

XGBoost Classifier merupakan salah satu algoritma yang terbaru dalam dunia machine learning, berbasis gradien ekstrim. Keunggulan XGBoost mencakup akurasi tinggi, skalabilitas, dan fleksibilitas, serta regularisasi bawaan XGBoost membantu mencegah overfitting dan meningkatkan generalisasi.

Parameter XGBoost yang akan digunakan adalah:
- **booster**: booster yang digunakan oleh XGBoost (sesuai namanya dalam algoritmanya, Boost). Defaultnya adalah 'gbtree', yang menggunakan booster berbasis pohon.
- **tree_method**: struktur pohon yang digunakan oleh booster, khusus booster tipe pohon. Jenis 'exact' menggunakan algoritma tipe serakah (greedy), yang mengenumerasikan semua kandidat.
"""

xgb = XGBClassifier(booster = 'gbtree', tree_method = 'exact')
xgb.fit(X_train, y_train)
xgb_train_acc = accuracy_score(y_train, xgb.predict(X_train))
print(f"Akurasi Pelatihan Model XGBoost Classifier = {xgb_train_acc}")

"""Didapatkan akurasi dengan data latih sebesar 99.7%, sangat baik. Selanjutnya, uji coba dengan data uji."""

xgb_y_pred = xgb.predict(X_test)
xgb_acc = accuracy_score(y_test, xgb_y_pred)
print (f"Akurasi Tes Model XGBoost Classifier = {xgb_acc}")

class_labels = ['No Failure (Actual)', 'Failure (Actual)']
pred_labels = ['No Failure (Prediction)', 'Failure (Prediction)']
xgb_cm = confusion_matrix(y_test, xgb_y_pred)
sns.heatmap(xgb_cm, annot=True, fmt='d', xticklabels=pred_labels, yticklabels=class_labels)
plt.show()

"""Saat dievaluasi terhadap data uji, akurasinya turun menjadi 97.6%, tidak terlalu signifikan.

**Random Forest Classifier**

Random Forest Classifier layak dicoba karena merupakan salah satu algoritma berbasis Ensemble Learning yang umum digunakan sejak dahulu. Keunggulan Random Forest mencakup kinerja yang baik dalam berbagai jenis masalah klasifikasi, kemampuan bawaan untuk mengurangi overfitting.

Parameter Random Forest Classifier yang digunakan adalah:
- **n_estimators**: Jumlah pohon dalam forest. (Nilai Default = 100)
- **max_depth**: Kedalaman atau panjang pohon. Ini merupakan ukuran seberapa banyak pohon dapat membelah (splitting) untuk membagi setiap node ke dalam jumlah pengamatan yang diinginkan.
- **random_state**: Digunakan untuk mengontrol random number generator yang digunakan.
"""

rf = RandomForestClassifier(n_estimators=50, max_depth=18, random_state=42)
rf.fit(X_train, y_train)
rf_train_acc = accuracy_score(y_train, rf.predict(X_train))
print(f"Akurasi Pelatihan Model Random Forest Classifier = {rf_train_acc}")

"""Didapatkan akurasi dengan data latih sebesar 99.9%, hampir sempurna. Selanjutnya, uji coba dengan data uji."""

rf_y_pred = rf.predict(X_test)
rf_acc = accuracy_score(y_test, rf_y_pred)
print (f"Akurasi Tes model Random Forest Classfier = {rf_acc}")

class_labels = ['No Failure (Actual)', 'Failure (Actual)']
pred_labels = ['No Failure (Prediction)', 'Failure (Prediction)']
rf_cm = confusion_matrix(y_test, rf_y_pred)
sns.heatmap(rf_cm, annot=True, fmt='d', xticklabels=pred_labels, yticklabels=class_labels)
plt.show()

"""Saat dievaluasi terhadap data uji, akurasinya turun menjadi 98%, tidak terlalu signifikan.

**Multi Layer Perceptron Classifier**

MLP Classsifier adalaha algoritma klasifikasi berbasis neural network (perceptron). Keunggulan MLP Classifier mencakup keunggulan dalam pemodelan hubungan non-linier, mempelajari fitur secara otomatis, dan menangani kumpulan data besar dengan skalabilitas.

Parameter yang digunakan dalam MLP Classifier mencakup:
- **activation**: fungsi aktivasi dari neuron. Defaultnya adalah 'relu', tapi karena proyek klasifikasi ini hanya mencakup klasifikasi biner, maka digunakan aktivasi 'logistic'.
- **solver**: solver untuk optimisasi neuron. Defaultnya adalah 'adam'
- **max_iter**: membatasi iterasi yang dilaksanakan oleh solver.
"""

mlp = MLPClassifier(activation='logistic', solver='adam', max_iter = 300)
mlp.fit(X_train, y_train)
mlp_train_acc = accuracy_score(y_train, mlp.predict(X_train))
print(f"Akurasi Pelatihan Model Multi Layer Perceptron Classifier = {mlp_train_acc}")

"""Didapatkan akurasi dengan data latih sebesar 97.2%, sangat baik meski tak sebaik 2 algoritma sebelumnya. Selanjutnya, uji coba dengan data uji."""

mlp_y_pred = mlp.predict(X_test)
mlp_acc = accuracy_score(y_test, mlp_y_pred)
print (f"Akurasi model Multi Layer Perceptron Classifier = {mlp_acc}")

class_labels = ['No Failure (Actual)', 'Failure (Actual)']
pred_labels = ['No Failure (Prediction)', 'Failure (Prediction)']
mlp_cm = confusion_matrix(y_test, mlp_y_pred)
sns.heatmap(mlp_cm, annot=True, fmt='d', xticklabels=pred_labels, yticklabels=class_labels)
plt.show()

"""Saat dievaluasi terhadap data uji, akurasinya konsisten di angka 97.2%.

## Kesimpulan

Berikut adalah hasil pengujian model prediksi menggunakan XGBoost, Random Forest, dan Multi Layer Perceptron, masing-masing 1 kali percobaan.
"""

models = pd.DataFrame({
    'Model':
    ['XGBoost Classifier', 'Random Forest Classifier', 'Multi Layer Perceptron Classifier'],
    'Train Accuracy' :
    [xgb_train_acc, rf_train_acc, mlp_train_acc],
    'Test Accuracy' :
    [xgb_acc, rf_acc, mlp_acc]
})
models

"""Dari hasil di atas, dapat ditarik kesimpulan:

1. Random Forest bekerja paling baik dengan data latih (99.9% akurasi) dan data uji (98% akurasi)
2. XGBoost bekerja sangat baik dengan data latih (99.7% akurasi), meskipun kalah tipis baiknya dari Random Forest (97.6% akurasi)
3. Multi Layer Perceptron bekerja paling konsisten, dengan akurasi yang persis dengan data latih dan data uji (keduanya di 97.2% akurasi)

Dari hasil di atas, bisa disimpulkan bahwa Random Forest layak digunakan untuk diimplementasikan dalam memprediksi kerusakan mesin milling, karena akurasinya yang tinggi. Metode ini layak untuk diimplementasikan ke lapangan karena mampu membantu mencegah kerusakan mesin milling yang berpotensi berdampak kepada laju produksi barang, atau berdampak kepada kemajuan kualitas alat potong mesin milling di masa depan.
"""